import asyncio
import logging
import re
from typing import Dict, Set, Optional
from twitchio.ext import commands
from twitchio import Client
from translator_advanced import AdvancedTranslationService

class TranslateBot(commands.Bot):
    """Twitch –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    
    def __init__(self, access_token: str, client_id: str, nickname: str, channel: str):
        super().__init__(
            token=access_token,
            client_id=client_id,
            nick=nickname,
            prefix='!',
            initial_channels=[channel]
        )
        
        self.channel = channel
        self.translator = AdvancedTranslationService()
        self.logger = logging.getLogger(__name__)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
        self.global_translate_enabled = True
        self.auto_translate_users: Set[str] = set()
        
        # –ö—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        self.translation_cache: Dict[str, str] = {}
        
        self.logger.info(f"–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞: {channel}")
        
    def has_moderator_privileges(self, message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞–Ω–∞–ª–∞"""
        author = message.author
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
        if author.is_mod:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞–Ω–∞–ª–∞ (broadcaster)
        if hasattr(author, 'is_broadcaster') and author.is_broadcaster:
            return True
            
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ –∏–º–µ–Ω–∏
        if author.name.lower() == self.channel.lower():
            return True
            
        return False
        
    async def event_ready(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Twitch"""
        self.logger.info(f"–ë–æ—Ç {self.nick} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Twitch!")
        self.logger.info(f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É: {self.channel}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
        ready_message = "ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: !ru <—Ç–µ–∫—Å—Ç>, !en <—Ç–µ–∫—Å—Ç>, !auto @user on/off, !translate on/off, !status"
        try:
            await self.get_channel(self.channel).send(ready_message)
            self.logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç: {ready_message}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {e}")
        
    async def event_message(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if message.echo:
            return
            
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.logger.info(f"[{message.author.name}]: {message.content}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
        if message.content.startswith('!'):
            await self.handle_commands(message)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥–∞
            await self.handle_auto_translate(message)
            
    async def handle_commands(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
        content = message.content.lower().strip()
        author = message.author.name
        
        # –ö–æ–º–∞–Ω–¥–∞ !ru
        if content.startswith('!ru '):
            text = message.content[4:].strip()
            if text:
                await self.handle_translate_command(message, text, 'ru')
            else:
                await message.channel.send(f"@{author} ‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !ru <—Ç–µ–∫—Å—Ç>")
                
        # –ö–æ–º–∞–Ω–¥–∞ !en
        elif content.startswith('!en '):
            text = message.content[4:].strip()
            if text:
                await self.handle_translate_command(message, text, 'en')
            else:
                await message.channel.send(f"@{author} ‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !en <—Ç–µ–∫—Å—Ç>")
                
        # –ö–æ–º–∞–Ω–¥–∞ !auto
        elif content.startswith('!auto '):
            await self.handle_auto_command(message)
            
        # –ö–æ–º–∞–Ω–¥–∞ !translate
        elif content.startswith('!translate '):
            await self.handle_global_translate_command(message)
            
        # –ö–æ–º–∞–Ω–¥–∞ !status - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        elif content == '!status':
            await self.handle_status_command(message)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
        else:
            await super().event_message(message)
            
    async def handle_translate_command(self, message, text: str, target_lang: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–≤–æ–¥–∞"""
        author = message.author.name
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        cache_key = f"{text}_{target_lang}"
        if cache_key in self.translation_cache:
            translated_text = self.translation_cache[cache_key]
        else:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
            if target_lang == 'ru':
                translated_text = self.translator.translate_to_russian(text)
            else:
                translated_text = self.translator.translate_to_english(text)
                
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
            if translated_text:
                self.translation_cache[cache_key] = translated_text
                
        if translated_text:
            lang_name = "—Ä—É—Å—Å–∫–∏–π" if target_lang == 'ru' else "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"
            response = f"@{author} write: {translated_text}"
            await message.channel.send(response)
            self.logger.info(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è {author} –Ω–∞ {lang_name}: {text} -> {translated_text}")
        else:
            error_message = f"@{author} ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è."
            await message.channel.send(error_message)
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è {author}: {text}")
            
    async def handle_auto_command(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É !auto"""
        content = message.content[6:].strip()  # –£–±–∏—Ä–∞–µ–º '!auto '
        author = message.author.name
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞
        if not self.has_moderator_privileges(message):
            await message.channel.send(f"@{author} üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞!")
            return
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã: !auto @nickname on/off
        match = re.match(r'@(\w+)\s+(on|off)', content)
        if not match:
            await message.channel.send(f"@{author} ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !auto @nickname on/off")
            return
            
        target_user = match.group(1).lower()
        action = match.group(2)
        
        if action == 'on':
            if target_user in self.auto_translate_users:
                await message.channel.send(f"‚ÑπÔ∏è @{author} –ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è @{target_user} —É–∂–µ –≤–∫–ª—é—á–µ–Ω!")
                return
            
            self.auto_translate_users.add(target_user)
            users_count = len(self.auto_translate_users)
            success_message = f"‚úÖ @{author} –ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è @{target_user} —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω! –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞: {users_count}"
            await message.channel.send(success_message)
            self.logger.info(f"–ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –≤–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {target_user} (–∫–æ–º–∞–Ω–¥–∞ –æ—Ç {author})")
        else:
            if target_user not in self.auto_translate_users:
                await message.channel.send(f"‚ÑπÔ∏è @{author} –ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è @{target_user} —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω!")
                return
                
            self.auto_translate_users.discard(target_user)
            users_count = len(self.auto_translate_users)
            success_message = f"üî¥ @{author} –ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è @{target_user} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞: {users_count}"
            await message.channel.send(success_message)
            self.logger.info(f"–ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {target_user} (–∫–æ–º–∞–Ω–¥–∞ –æ—Ç {author})")
            
    async def handle_global_translate_command(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É !translate"""
        content = message.content[11:].strip()  # –£–±–∏—Ä–∞–µ–º '!translate '
        author = message.author.name
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞
        if not self.has_moderator_privileges(message):
            await message.channel.send(f"@{author} üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞!")
            return
            
        if content == 'on':
            if self.global_translate_enabled:
                await message.channel.send(f"‚ÑπÔ∏è @{author} –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —É–∂–µ –≤–∫–ª—é—á–µ–Ω!")
                return
                
            self.global_translate_enabled = True
            users_count = len(self.auto_translate_users)
            success_message = f"üåê @{author} –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω! –ê–∫—Ç–∏–≤–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–µ: {users_count}. –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
            await message.channel.send(success_message)
            self.logger.info(f"–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤–∫–ª—é—á–µ–Ω (–∫–æ–º–∞–Ω–¥–∞ –æ—Ç {author})")
        elif content == 'off':
            if not self.global_translate_enabled:
                await message.channel.send(f"‚ÑπÔ∏è @{author} –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω!")
                return
                
            self.global_translate_enabled = False
            success_message = f"üö´ @{author} –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            await message.channel.send(success_message)
            self.logger.info(f"–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω (–∫–æ–º–∞–Ω–¥–∞ –æ—Ç {author})")
        else:
            await message.channel.send(f"@{author} ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !translate on/off")
            
    async def handle_status_command(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É !status"""
        author = message.author.name
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
        global_status = "–≤–∫–ª—é—á–µ–Ω" if self.global_translate_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω"
        users_count = len(self.auto_translate_users)
        cache_size = len(self.translation_cache)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        status_message = f"üìä @{author} –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ {global_status} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–µ: {users_count} | –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –∫—ç—à–µ: {cache_size}"
        
        await message.channel.send(status_message)
        self.logger.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∑–∞–ø—Ä–æ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {author}")
            
    async def handle_auto_translate(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.global_translate_enabled:
            return
            
        author = message.author.name.lower()
        content = message.content.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_in_auto_list = author in self.auto_translate_users
        should_auto_detect = self.should_auto_translate_message(content)
        
        # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        if user_in_auto_list:
            should_translate = self.should_translate_for_auto_user(content)
        else:
            should_translate = should_auto_detect
        
        if should_translate and content:
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è {message.author.name}: user_in_auto_list={user_in_auto_list}, should_auto_detect={should_auto_detect}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —è–∑—ã–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            latin_chars = len(re.findall(r'[a-zA-Z]', content))
            cyrillic_chars = len(re.findall(r'[–∞-—è—ë]', content, re.IGNORECASE))
            total_chars = len(re.findall(r'[a-zA-Z–∞-—è—ë]', content, re.IGNORECASE))
            
            if total_chars > 0:
                latin_percent = (latin_chars / total_chars) * 100
                cyrillic_percent = (cyrillic_chars / total_chars) * 100
                
                self.logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ —è–∑—ã–∫–∞ –¥–ª—è '{content}': –ª–∞—Ç–∏–Ω–∏—Ü–∞ {latin_percent:.1f}%, –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ {cyrillic_percent:.1f}%")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
                if user_in_auto_list:
                    # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞ - –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —è–∑—ã–∫
                    if cyrillic_percent > 50 and latin_percent < 50:
                        # –ü—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π - –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                        translated_text = self.translator.translate_to_english(content)
                        target_lang = "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"
                        self.logger.info(f"üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è {message.author.name}: —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
                    elif latin_percent > 50 and cyrillic_percent < 50:
                        # –ü—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π - –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π
                        translated_text = self.translator.translate_to_russian(content)
                        target_lang = "—Ä—É—Å—Å–∫–∏–π"
                        self.logger.info(f"üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è {message.author.name}: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π")
                    else:
                        # –°–º–µ—à–∞–Ω–Ω—ã–π —è–∑—ã–∫ - –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º
                        self.logger.info(f"‚è≠Ô∏è –°–º–µ—à–∞–Ω–Ω—ã–π —è–∑—ã–∫ –¥–ª—è {message.author.name} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        return
                        
                    if translated_text and translated_text != content:
                        response = f"@{message.author.name} write: {translated_text}"
                        await message.channel.send(response)
                        self.logger.info(f"üîÑ –ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è {message.author.name} –Ω–∞ {target_lang}: {content} -> {translated_text}")
                        
                # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ - –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π
                elif should_auto_detect:
                    translated_text = self.translator.translate_to_russian(content)
                    if translated_text and translated_text != content:
                        response = f"@{message.author.name} write: {translated_text}"
                        await message.channel.send(response)
                        self.logger.info(f"üîÑ –ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è {message.author.name}: {content} -> {translated_text}")
            else:
                self.logger.info(f"‚è≠Ô∏è –ù–µ—Ç –±—É–∫–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: '{content}'")
                        
    def should_auto_translate_message(self, content: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)"""
        if len(content) < 3:
            return False
            
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
        latin_chars = len(re.findall(r'[a-zA-Z]', content))
        cyrillic_chars = len(re.findall(r'[–∞-—è—ë]', content, re.IGNORECASE))
        total_chars = len(re.findall(r'[a-zA-Z–∞-—è—ë]', content, re.IGNORECASE))
        
        if total_chars == 0:
            return False
            
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
        latin_percent = (latin_chars / total_chars) * 100
        cyrillic_percent = (cyrillic_chars / total_chars) * 100
        
        # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        # –µ—Å–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª—å—à–µ 50%
        return latin_percent > 50
        
    def should_translate_for_auto_user(self, content: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞"""
        if len(content) < 3:
            return False
            
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
        latin_chars = len(re.findall(r'[a-zA-Z]', content))
        cyrillic_chars = len(re.findall(r'[–∞-—è—ë]', content, re.IGNORECASE))
        total_chars = len(re.findall(r'[a-zA-Z–∞-—è—ë]', content, re.IGNORECASE))
        
        if total_chars == 0:
            return False
            
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
        latin_percent = (latin_chars / total_chars) * 100
        cyrillic_percent = (cyrillic_chars / total_chars) * 100
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–¥–∏–Ω —è–∑—ã–∫ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ë–û–õ–¨–®–ï 50% (–Ω–µ —Ä–∞–≤–Ω–æ!)
        # –ò –≤—Ç–æ—Ä–æ–π —è–∑—ã–∫ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ú–ï–ù–¨–®–ï 50%
        return (latin_percent > 50 and cyrillic_percent < 50) or (cyrillic_percent > 50 and latin_percent < 50)
        
    def get_status(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        return {
            'global_translate': self.global_translate_enabled,
            'auto_translate_users': list(self.auto_translate_users),
            'cache_size': len(self.translation_cache)
        }
        
    async def event_disconnect(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç Twitch"""
        self.logger.info(f"–ë–æ—Ç {self.nick} –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç Twitch")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        goodbye_message = "ü§ñ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
        try:
            channel = self.get_channel(self.channel)
            if channel:
                await channel.send(goodbye_message)
                self.logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç: {goodbye_message}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
            
    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            self.logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            await self.start()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
