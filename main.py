#!/usr/bin/env python3
"""
Twitch Translate Bot - –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import os
import sys
import logging
import asyncio
from dotenv import load_dotenv
from auth_gui import AuthGUI
from twitch_bot import TranslateBot

def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler('bot.log', encoding='utf-8')
        ]
    )
    
def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    load_dotenv()
    
    required_vars = [
        'TWITCH_ACCESS_TOKEN',
        'TWITCH_CLIENT_ID',
        'TWITCH_NICKNAME', 
        'TWITCH_CHANNEL'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
            
    return missing_vars

def get_auth_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ .env —Ñ–∞–π–ª–∞"""
    load_dotenv()
    
    return {
        'access_token': os.getenv('TWITCH_ACCESS_TOKEN'),
        'refresh_token': os.getenv('TWITCH_REFRESH_TOKEN', ''),
        'client_id': os.getenv('TWITCH_CLIENT_ID'),
        'nickname': os.getenv('TWITCH_NICKNAME'),
        'channel': os.getenv('TWITCH_CHANNEL')
    }

def show_welcome_message():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    print("=" * 60)
    print("üéÆ Twitch Translate Bot")
    print("=" * 60)
    print("–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:")
    print("‚Ä¢ !ru <—Ç–µ–∫—Å—Ç> - –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π")
    print("‚Ä¢ !en <—Ç–µ–∫—Å—Ç> - –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
    print("‚Ä¢ !auto @nickname on/off - –∞–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("‚Ä¢ !translate on/off - –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)")
    print("=" * 60)

async def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    logger = logging.getLogger(__name__)
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_data = get_auth_data()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot = TranslateBot(
            access_token=auth_data['access_token'],
            client_id=auth_data['client_id'],
            nickname=auth_data['nickname'],
            channel=auth_data['channel']
        )
        
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await bot.run()
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        return False
        
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    logger = logging.getLogger(__name__)
    
    # –ü–æ–∫–∞–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    show_welcome_message()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    missing_vars = check_environment()
    
    if missing_vars:
        logger.info("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ó–∞–ø—É—Å–∫ GUI –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
        
        # –ó–∞–ø—É—Å–∫ GUI –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try:
            auth_gui = AuthGUI()
            auth_gui.run()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è GUI
            missing_vars = check_environment()
            if missing_vars:
                logger.error(f"–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_vars)}")
                print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.")
                print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–Ω–æ–≤–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GUI: {e}")
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            return False
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        asyncio.run(run_bot())
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
        
    return True

if __name__ == "__main__":
    success = main()
    if not success:
        print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        input()
        sys.exit(1)
