const tmi = require('tmi.js');
const { AdvancedTranslationService } = require('./translator_advanced.js');
const EventEmitter = require('events');
const fs = require('fs');
const path = require('path');

class TranslateBot extends EventEmitter {
    constructor(accessToken, clientId, nickname, channel) {
        super();
        
        this.accessToken = accessToken;
        this.clientId = clientId;
        this.nickname = nickname;
        this.channel = channel;
        
        this.translator = new AdvancedTranslationService();
        this.autoTranslateUsers = new Set();
        this.translationCache = new Map();
        
        this.client = null;
        this.isRunning = false;
        
        // Error handling
        this.errorCount = 0;
        this.maxErrors = 10;
        this.errorResetInterval = 1000 * 60 * 10; // 10 –º–∏–Ω—É—Ç
        this.lastErrorReset = Date.now();
        
        // Retry logic
        this.maxRetries = 3;
        this.retryDelay = 2000;
        
        // Concurrency control
        this.activeOperations = new Map();
        this.operationQueue = [];
        this.maxConcurrentOperations = 5;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞
        this.loadAutoTranslateSettings();
        
        this.log('–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞: ' + channel);
    }

    log(message, type = 'info') {
        const timestamp = new Date().toISOString();
        const logMessage = `[${timestamp}] ${message}`;
        
        // Emit log event for renderer
        this.emit('log', message);
        
        // Also log to console
        console.log(logMessage);
    }
    
    handleError(error, context = '', isCritical = false) {
        this.errorCount++;
        this.log(`‚ùå –û—à–∏–±–∫–∞ [${context}]: ${error.message}`, 'error');
        
        // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (Date.now() - this.lastErrorReset > this.errorResetInterval) {
            this.errorCount = 0;
            this.lastErrorReset = Date.now();
        }
        
        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫
        if (isCritical || this.errorCount > this.maxErrors) {
            this.log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: ${this.errorCount} –æ—à–∏–±–æ–∫ –∑–∞ ${this.errorResetInterval/1000/60} –º–∏–Ω—É—Ç`, 'error');
            
            if (this.isRunning) {
                this.handleCriticalError(error, context);
            }
        }
        
        return !isCritical && this.errorCount <= this.maxErrors;
    }
    
    async handleCriticalError(error, context) {
        this.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏...', 'warning');
        
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
            if (this.client && this.isRunning) {
                await this.sendMessage('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–æ—Ç–æ–º. –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...');
            }
            
            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await this.reconnect();
            
        } catch (reconnectError) {
            this.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${reconnectError.message}`, 'error');
            if (this.isRunning) {
                await this.stop();
            }
        }
    }
    
    async reconnect() {
        this.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Twitch...', 'info');
        
        if (this.client) {
            this.client.disconnect();
            this.client = null;
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await this.start();
    }
    
    async safeExecute(operation, context, retries = this.maxRetries) {
        for (let attempt = 1; attempt <= retries; attempt++) {
            try {
                return await operation();
            } catch (error) {
                const isLastAttempt = attempt === retries;
                
                if (isLastAttempt) {
                    if (!this.handleError(error, context)) {
                        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                    }
                    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –¥–ª—è –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                }
                
                this.log(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries} –Ω–µ—É–¥–∞—á–Ω–∞ [${context}]: ${error.message}`, 'warning');
                await new Promise(resolve => setTimeout(resolve, this.retryDelay * attempt));
            }
        }
    }
    
    async handleMessageSafely(messageObj) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!messageObj || !messageObj.author || !messageObj.author.username || !messageObj.content) {
            this.log('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'warning');
            return;
        }
        
        const operationId = `${messageObj.author.username}_${Date.now()}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç concurrent –æ–ø–µ—Ä–∞—Ü–∏–π
        if (this.activeOperations.size >= this.maxConcurrentOperations) {
            this.log(`‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º –æ–ø–µ—Ä–∞—Ü–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –æ—Ç ${messageObj.author.username}`, 'warning');
            this.operationQueue.push({ messageObj, operationId });
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
        this.activeOperations.set(operationId, {
            username: messageObj.author.username,
            startTime: Date.now(),
            type: messageObj.content.startsWith('!') ? 'command' : 'auto_translate'
        });
        
        try {
            await this.safeExecute(async () => {
                if (messageObj.content.startsWith('!')) {
                    await this.handleCommands(messageObj);
                } else {
                    await this.handleAutoTranslate(messageObj);
                }
            }, `message_processing_${messageObj.author.username}`);
        } finally {
            // –£–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            this.activeOperations.delete(operationId);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            this.processOperationQueue();
        }
    }
    
    processOperationQueue() {
        while (this.operationQueue.length > 0 && this.activeOperations.size < this.maxConcurrentOperations) {
            const { messageObj, operationId } = this.operationQueue.shift();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥)
            const messageAge = Date.now() - parseInt(operationId.split('_')[1]);
            if (messageAge > 30000) {
                this.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${messageObj.author.username}`, 'warning');
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ
            }
            
            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            setImmediate(() => this.handleMessageSafely(messageObj));
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    getOperationStats() {
        const now = Date.now();
        const stats = {
            active: this.activeOperations.size,
            queued: this.operationQueue.length,
            details: []
        };
        
        for (const [id, operation] of this.activeOperations.entries()) {
            stats.details.push({
                id,
                username: operation.username,
                type: operation.type,
                duration: now - operation.startTime
            });
        }
        
        return stats;
    }

    hasModeratorPrivileges(user) {
        // Check if user is moderator or channel owner
        return user.mod || user['user-type'] === 'mod' || user.username.toLowerCase() === this.channel.toLowerCase();
    }

    shouldAutoTranslateMessage(content) {
        if (content.length < 3) return false;
        
        const latinChars = (content.match(/[a-zA-Z]/g) || []).length;
        const cyrillicChars = (content.match(/[–∞-—è—ë]/gi) || []).length;
        const totalChars = latinChars + cyrillicChars;
        
        if (totalChars === 0) return false;
        
        const latinPercent = (latinChars / totalChars) * 100;
        
        // For auto-detection: translate only English to Russian
        return latinPercent > 50;
    }

    shouldTranslateForAutoUser(content) {
        if (content.length < 3) return false;
        
        const latinChars = (content.match(/[a-zA-Z]/g) || []).length;
        const cyrillicChars = (content.match(/[–∞-—è—ë]/gi) || []).length;
        const spanishChars = (content.match(/[√±√°√©√≠√≥√∫√º¬ø¬°]/gi) || []).length;
        const totalChars = latinChars + cyrillicChars;
        
        if (totalChars === 0) return false;
        
        const latinPercent = (latinChars / totalChars) * 100;
        const cyrillicPercent = (cyrillicChars / totalChars) * 100;
        const spanishPercent = (spanishChars / totalChars) * 100;
        
        // Translate only if one language is > 50% and the other is < 50%
        return (latinPercent > 50 && cyrillicPercent < 50) || (cyrillicPercent > 50 && latinPercent < 50) || (spanishPercent > 10);
    }
    
    detectLanguage(text) {
        if (!text || text.length < 2) return null;
        
        const latinChars = (text.match(/[a-zA-Z]/g) || []).length;
        const cyrillicChars = (text.match(/[–∞-—è—ë]/gi) || []).length;
        const spanishChars = (text.match(/[√±√°√©√≠√≥√∫√º¬ø¬°]/gi) || []).length;
        const totalChars = latinChars + cyrillicChars;
        
        if (totalChars === 0) return null;
        
        const latinPercent = (latinChars / totalChars) * 100;
        const cyrillicPercent = (cyrillicChars / totalChars) * 100;
        const spanishPercent = (spanishChars / totalChars) * 100;
        
        if (cyrillicPercent > 50) return 'ru';
        if (spanishPercent > 10) return 'es'; // –ò—Å–ø–∞–Ω—Å–∫–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å–ø–∞–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
        if (latinPercent > 50) return 'en';
        
        return null; // Mixed language
    }

    async handleAutoTranslate(message) {
        const author = message.author.username.toLowerCase();
        const content = message.content.trim();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if (content.length > 300) {
            this.log(`‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç ${message.author.username}: ${content.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            return;
        }
        
        const userInAutoList = this.autoTranslateUsers.has(author);
        
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ !auto
        if (!userInAutoList) {
            return;
        }
        
        const shouldTranslate = this.shouldTranslateForAutoUser(content);
        
        if (shouldTranslate && content) {
            this.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è ${message.author.username}: user_in_auto_list=${userInAutoList}`);
            
            const latinChars = (content.match(/[a-zA-Z]/g) || []).length;
            const cyrillicChars = (content.match(/[–∞-—è—ë]/gi) || []).length;
            const spanishChars = (content.match(/[√±√°√©√≠√≥√∫√º¬ø¬°]/gi) || []).length;
            const totalChars = latinChars + cyrillicChars;
            
            if (totalChars > 0) {
                const latinPercent = (latinChars / totalChars) * 100;
                const cyrillicPercent = (cyrillicChars / totalChars) * 100;
                const spanishPercent = (spanishChars / totalChars) * 100;
                
                this.log(`üîç –ê–Ω–∞–ª–∏–∑ —è–∑—ã–∫–∞ –¥–ª—è '${content}': –ª–∞—Ç–∏–Ω–∏—Ü–∞ ${latinPercent.toFixed(1)}%, –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ ${cyrillicPercent.toFixed(1)}%, –∏—Å–ø–∞–Ω—Å–∫–∏–π ${spanishPercent.toFixed(1)}%`);
                
                if (userInAutoList) {
                    // For users in auto-translate list - translate to opposite language
                    if (cyrillicPercent > 50 && latinPercent < 50) {
                        // Russian predominates - translate to English
                        const translatedText = await this.translator.translateToEnglish(content);
                        const targetLang = "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π";
                        this.log(`üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è ${message.author.username}: —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π`);
                        
                        if (translatedText && translatedText !== content) {
                            await this.sendMessage(`@${message.author.username} write: ${translatedText}`);
                            this.log(`üîÑ –ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è ${message.author.username} –Ω–∞ ${targetLang}: ${content} -> ${translatedText}`);
                        }
                    } else if (latinPercent > 50 && cyrillicPercent < 50 && spanishPercent < 10) {
                        // English predominates - translate to Russian
                        const translatedText = await this.translator.translateToRussian(content);
                        const targetLang = "—Ä—É—Å—Å–∫–∏–π";
                        this.log(`üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è ${message.author.username}: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π`);
                        
                        if (translatedText && translatedText !== content) {
                            await this.sendMessage(`@${message.author.username} –ø–∏—à–µ—Ç: ${translatedText}`);
                            this.log(`üîÑ –ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è ${message.author.username} –Ω–∞ ${targetLang}: ${content} -> ${translatedText}`);
                        }
                    } else if (spanishPercent > 10) {
                        // Spanish predominates - translate to English
                        const translatedText = await this.translator.translateToEnglish(content);
                        const targetLang = "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π";
                        this.log(`üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è ${message.author.username}: –∏—Å–ø–∞–Ω—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π`);
                        
                        if (translatedText && translatedText !== content) {
                            await this.sendMessage(`@${message.author.username} write: ${translatedText}`);
                            this.log(`üîÑ –ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è ${message.author.username} –Ω–∞ ${targetLang}: ${content} -> ${translatedText}`);
                        }
                    } else {
                        // Mixed language - don't translate
                        this.log(`‚è≠Ô∏è –°–º–µ—à–∞–Ω–Ω—ã–π —è–∑—ã–∫ –¥–ª—è ${message.author.username} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    }
                }
            } else {
                this.log(`‚è≠Ô∏è –ù–µ—Ç –±—É–∫–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: '${content}'`);
            }
        }
    }

    async handleCommands(message) {
        const content = message.content.toLowerCase().trim();
        const author = message.author.username;
        
        // !ru command
        if (content.startsWith('!ru ')) {
            const text = message.content.substring(4).trim();
            if (text) {
                await this.handleTranslateCommand(message, text, 'ru');
            } else {
                await this.sendMessage(`@${author} ‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !ru <—Ç–µ–∫—Å—Ç>`);
            }
        }
        // !en command
        else if (content.startsWith('!en ')) {
            const text = message.content.substring(4).trim();
            if (text) {
                await this.handleTranslateCommand(message, text, 'en');
            } else {
                await this.sendMessage(`@${author} ‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !en <—Ç–µ–∫—Å—Ç>`);
            }
        }
        // !es command
        else if (content.startsWith('!es ')) {
            const text = message.content.substring(4).trim();
            if (text) {
                await this.handleTranslateCommand(message, text, 'es');
            } else {
                await this.sendMessage(`@${author} ‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !es <—Ç–µ–∫—Å—Ç>`);
            }
        }
        // !auto command
        else if (content.startsWith('!auto ')) {
            await this.handleAutoCommand(message);
        }

        // !tstatus command
        else if (content === '!tstatus') {
            await this.handleStatusCommand(message);
        }
    }

    async handleTranslateCommand(message, text, targetLang) {
        const author = message.author.username;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        if (text.length > 500) {
            await this.sendMessage(`@${author} ‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 500 —Å–∏–º–≤–æ–ª–æ–≤.`);
            this.log(`‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è ${author}: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            return;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞
        const sourceLang = this.detectLanguage(text);
        if (!sourceLang) {
            await this.sendMessage(`@${author} ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç.`);
            this.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –¥–ª—è ${author}: ${text}`);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —Ç–æ—Ç –∂–µ —è–∑—ã–∫
        if (sourceLang === targetLang) {
            const langNames = {
                'ru': '—Ä—É—Å—Å–∫–æ–º',
                'en': '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º',
                'es': '–∏—Å–ø–∞–Ω—Å–∫–æ–º'
            };
            await this.sendMessage(`@${author} ‚ÑπÔ∏è –¢–µ–∫—Å—Ç —É–∂–µ –Ω–∞ ${langNames[targetLang] || targetLang} —è–∑—ã–∫–µ.`);
            this.log(`‚ÑπÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —Ç–æ—Ç –∂–µ —è–∑—ã–∫ –¥–ª—è ${author}: ${text}`);
            return;
        }
        
        // Check cache
        const cacheKey = `${text}_${sourceLang}_${targetLang}`;
        let translatedText = this.translationCache.get(cacheKey);
        
        if (!translatedText) {
            // Perform translation with correct source language
            translatedText = await this.translator.translate(text, sourceLang, targetLang);
            
            // Save to cache with size limit
            if (translatedText) {
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
                if (this.translationCache.size >= 500) {
                    const firstKey = this.translationCache.keys().next().value;
                    this.translationCache.delete(firstKey);
                }
                this.translationCache.set(cacheKey, translatedText);
            }
        }
        
        if (translatedText) {
            const langNames = {
                'ru': "—Ä—É—Å—Å–∫–∏–π",
                'en': "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π", 
                'es': "–∏—Å–ø–∞–Ω—Å–∫–∏–π"
            };
            const writeTexts = {
                'ru': "–ø–∏—à–µ—Ç",
                'en': "write",
                'es': "escribe"
            };
            const langName = langNames[targetLang] || targetLang;
            const writeText = writeTexts[targetLang] || "write";
            await this.sendMessage(`@${author} ${writeText}: ${translatedText}`);
            this.log(`‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è ${author} –Ω–∞ ${langName}: ${text} -> ${translatedText}`);
        } else {
            await this.sendMessage(`@${author} ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.`);
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è ${author}: ${text}`);
        }
    }

    async handleAutoCommand(message) {
        const content = message.content.substring(6).trim(); // Remove '!auto '
        const author = message.author.username;
        
        // Check moderator privileges
        if (!this.hasModeratorPrivileges(message.author)) {
            await this.sendMessage(`@${author} üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞!`);
            return;
        }
        
        // Parse command: !auto @nickname on/off
        const match = content.match(/@(\w+)\s+(on|off)/);
        if (!match) {
            await this.sendMessage(`@${author} ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !auto @nickname on/off`);
            return;
        }
        
        const targetUser = match[1].toLowerCase();
        const action = match[2];
        
        if (action === 'on') {
            if (this.autoTranslateUsers.has(targetUser)) {
                await this.sendMessage(`‚ÑπÔ∏è @${author} –ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è @${targetUser} —É–∂–µ –≤–∫–ª—é—á–µ–Ω!`);
                return;
            }
            
            this.autoTranslateUsers.add(targetUser);
            const usersCount = this.autoTranslateUsers.size;
            await this.sendMessage(`‚úÖ @${author} –ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è @${targetUser} —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω! –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞: ${usersCount}`);
            this.log(`–ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –≤–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${targetUser} (–∫–æ–º–∞–Ω–¥–∞ –æ—Ç ${author})`);
            this.saveAutoTranslateSettings();
        } else {
            if (!this.autoTranslateUsers.has(targetUser)) {
                await this.sendMessage(`‚ÑπÔ∏è @${author} –ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è @${targetUser} —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω!`);
                return;
            }
            
            this.autoTranslateUsers.delete(targetUser);
            const usersCount = this.autoTranslateUsers.size;
            await this.sendMessage(`üî¥ @${author} –ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è @${targetUser} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞: ${usersCount}`);
            this.log(`–ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${targetUser} (–∫–æ–º–∞–Ω–¥–∞ –æ—Ç ${author})`);
            this.saveAutoTranslateSettings();
        }
    }



    async handleStatusCommand(message) {
        const author = message.author.username;
        
        const usersCount = this.autoTranslateUsers.size;
        const cacheSize = this.translationCache.size;
        
        const statusMessage = `üìä @${author} –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–µ: ${usersCount} | –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –∫—ç—à–µ: ${cacheSize}`;
        
        await this.sendMessage(statusMessage);
        this.log(`–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∑–∞–ø—Ä–æ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${author}`);
    }

    async sendMessage(message) {
        if (this.client) {
            return await this.safeExecute(async () => {
                await this.client.say(this.channel, message);
            }, 'send_message');
        }
    }

    async start() {
        try {
            this.log('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
            
            // Initialize Twitch client
            this.client = new tmi.Client({
                options: { debug: false },
                connection: {
                    reconnect: true,
                    secure: true
                },
                identity: {
                    username: this.nickname,
                    password: this.accessToken
                },
                channels: [this.channel]
            });
            
            // Set up event handlers
            this.client.on('connected', (addr, port) => {
                this.log(`–ë–æ—Ç ${this.nickname} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Twitch!`);
                this.log(`–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É: ${this.channel}`);
                this.sendMessage('ü§ñ –ë–æ—Ç –∞–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: !ru <text>, !en <text>, !es <text>, !auto @user on/off, !tstatus');
            });
            
            this.client.on('message', async (channel, tags, message, self) => {
                if (self) return; // Ignore bot's own messages
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–≥–æ–≤
                if (!tags || !tags.username) {
                    this.log('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'warning');
                    return;
                }
                
                // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                this.log(`üí¨ ${tags.username}: ${message}`);
                
                // Create message object for compatibility
                const messageObj = {
                    content: message,
                    author: {
                        username: tags.username,
                        mod: tags.mod || false,
                        'user-type': tags['user-type'] || 'user'
                    }
                };
                
                // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º concurrency
                // –ù–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫
                this.handleMessageSafely(messageObj).catch(error => {
                    this.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${tags.username}: ${error.message}`, 'error');
                });
            });
            
            this.client.on('disconnected', (reason) => {
                this.log(`–ë–æ—Ç ${this.nickname} –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç Twitch: ${reason}`);
                this.isRunning = false;
            });
            
            this.client.on('error', (error) => {
                this.log(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Twitch: ${error.message}`, 'error');
                this.handleError(error, 'twitch_connection', true);
            });
            
            // Connect to Twitch
            await this.client.connect();
            this.isRunning = true;
            
            this.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
            
        } catch (error) {
            this.log(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ${error.message}`, 'error');
            throw error;
        }
    }

    async stop() {
        try {
            this.log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
            
            if (this.client) {
                // Send goodbye message
                await this.sendMessage('ü§ñ –ë–æ—Ç –∞–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
                
                // Disconnect from Twitch
                this.client.disconnect();
                this.client = null;
            }
            
            this.isRunning = false;
            
            // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            this.operationQueue = [];
            this.activeOperations.clear();
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
            if (this.translator && this.translator.stopCacheCleanup) {
                this.translator.stopCacheCleanup();
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
            this.saveAutoTranslateSettings();
            
            this.log('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            
        } catch (error) {
            this.log(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: ${error.message}`, 'error');
            throw error;
        }
    }

    getStatus() {
        const operationStats = this.getOperationStats();
        
        return {
            running: this.isRunning,
            autoTranslateUsers: Array.from(this.autoTranslateUsers),
            cacheSize: this.translationCache.size,
            errors: this.errorCount,
            operations: {
                active: operationStats.active,
                queued: operationStats.queued
            }
        };
    }

    getAutoTranslateSettingsPath() {
        return path.join(__dirname, '..', '..', 'auto_translate_settings.json');
    }

    saveAutoTranslateSettings() {
        try {
            const settings = {
                users: Array.from(this.autoTranslateUsers),
                timestamp: Date.now()
            };
            
            const settingsPath = this.getAutoTranslateSettingsPath();
            fs.writeFileSync(settingsPath, JSON.stringify(settings, null, 2));
            this.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${this.autoTranslateUsers.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        } catch (error) {
            this.log(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞: ${error.message}`, 'error');
        }
    }

    loadAutoTranslateSettings() {
        try {
            const settingsPath = this.getAutoTranslateSettingsPath();
            if (fs.existsSync(settingsPath)) {
                const data = fs.readFileSync(settingsPath, 'utf8');
                const settings = JSON.parse(data);
                
                if (settings.users && Array.isArray(settings.users)) {
                    this.autoTranslateUsers = new Set(settings.users);
                    this.log(`–ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞: ${this.autoTranslateUsers.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
                }
            }
        } catch (error) {
            this.log(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞: ${error.message}`, 'error');
        }
    }
}

module.exports = { TranslateBot };
