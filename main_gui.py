#!/usr/bin/env python3
"""
Twitch Translate Bot - GUI –≤–µ—Ä—Å–∏—è —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""

import os
import sys
import logging
import asyncio
import threading
import time
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
from dotenv import load_dotenv
from auth_gui import AuthGUI
from twitch_bot import TranslateBot

class BotGUI:
    """–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Twitch Translate Bot - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        self.root.geometry("900x700")
        self.root.resizable(True, True)
        self.root.minsize(800, 600)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        self.setup_dark_theme()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.bot = None
        self.bot_thread = None
        self.bot_running = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.check_settings()
        
    def setup_dark_theme(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã"""
        self.bg_color = "#2b2b2b"
        self.fg_color = "#ffffff"
        self.entry_bg = "#3c3c3c"
        self.entry_fg = "#ffffff"
        self.button_bg = "#4a4a4a"
        self.button_fg = "#ffffff"
        self.success_bg = "#2b4a2b"
        self.error_bg = "#4a2b2b"
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        style = ttk.Style()
        style.theme_use('clam')
        
        style.configure('TFrame', background=self.bg_color)
        style.configure('TLabel', background=self.bg_color, foreground=self.fg_color)
        style.configure('TButton', background=self.button_bg, foreground=self.button_fg)
        style.configure('TEntry', fieldbackground=self.entry_bg, foreground=self.entry_fg)
        style.configure('TLabelframe', background=self.bg_color, foreground=self.fg_color)
        style.configure('TLabelframe.Label', background=self.bg_color, foreground=self.fg_color)
        
        self.root.configure(bg=self.bg_color)
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('bot.log', encoding='utf-8')
            ]
        )
        self.logger = logging.getLogger(__name__)
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.pack(fill="both", expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üéÆ Twitch Translate Bot", 
                               font=("Arial", 18, "bold"))
        title_label.pack(pady=(0, 20))
        
        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        self.status_frame = ttk.LabelFrame(main_frame, text="üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", padding="10")
        self.status_frame.pack(fill="x", pady=(0, 20))
        
        self.status_label = ttk.Label(self.status_frame, text="‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω", 
                                     font=("Arial", 12, "bold"), foreground="red")
        self.status_label.pack()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill="x", pady=(0, 20))
        
        self.start_button = tk.Button(button_frame, text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", 
                                     command=self.start_bot,
                                     bg="#4CAF50", fg="white", font=("Arial", 12, "bold"),
                                     relief="raised", bd=2, padx=20, pady=10)
        self.start_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stop_button = tk.Button(button_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", 
                                    command=self.stop_bot,
                                    bg="#f44336", fg="white", font=("Arial", 12, "bold"),
                                    relief="raised", bd=2, padx=20, pady=10,
                                    state="disabled")
        self.stop_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.settings_button = tk.Button(button_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
                                        command=self.open_settings,
                                        bg="#2196F3", fg="white", font=("Arial", 12, "bold"),
                                        relief="raised", bd=2, padx=20, pady=10)
        self.settings_button.pack(side=tk.LEFT)
        
        # –õ–æ–≥ –±–æ—Ç–∞
        log_frame = ttk.LabelFrame(main_frame, text="üìù –õ–æ–≥ –±–æ—Ç–∞", padding="10")
        log_frame.pack(fill="both", expand=True)
        
        self.log_text = scrolledtext.ScrolledText(
            log_frame,
            bg=self.entry_bg,
            fg=self.entry_fg,
            font=("Consolas", 10),
            wrap=tk.WORD,
            state="disabled"
        )
        self.log_text.pack(fill="both", expand=True)
        
        # –ö–Ω–æ–ø–∫–∏ –ª–æ–≥–∞
        log_button_frame = ttk.Frame(log_frame)
        log_button_frame.pack(fill="x", pady=(10, 0))
        
        clear_log_button = tk.Button(log_button_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", 
                                    command=self.clear_log,
                                    bg="#FF9800", fg="white", font=("Arial", 10),
                                    relief="raised", bd=1, padx=10, pady=5)
        clear_log_button.pack(side=tk.LEFT)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö
        info_frame = ttk.LabelFrame(main_frame, text="üí° –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞", padding="10")
        info_frame.pack(fill="x", pady=(20, 0))
        
        commands_text = """‚Ä¢ !ru <—Ç–µ–∫—Å—Ç> - –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
‚Ä¢ !en <—Ç–µ–∫—Å—Ç> - –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π  
‚Ä¢ !auto @nickname on/off - –∞–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ !translate on/off - –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"""
        
        commands_label = ttk.Label(info_frame, text=commands_text, 
                                  font=("Arial", 10), justify=tk.LEFT)
        commands_label.pack(anchor=tk.W)
        
    def check_settings(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        load_dotenv()
        
        required_vars = [
            'TWITCH_ACCESS_TOKEN',
            'TWITCH_CLIENT_ID',
            'TWITCH_NICKNAME', 
            'TWITCH_CHANNEL'
        ]
        
        missing_vars = []
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
                
        if missing_vars:
            self.log_message("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            self.status_label.config(text="‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", foreground="orange")
        else:
            self.log_message("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–π–¥–µ–Ω—ã. –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
            self.status_label.config(text="‚úÖ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É", foreground="green")
            
    def log_message(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        try:
            self.log_text.config(state="normal")
            self.log_text.insert(tk.END, f"{message}\n")
            self.log_text.see(tk.END)
            self.log_text.config(state="disabled")
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ GUI —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        if self.bot_running:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        load_dotenv()
        if not os.getenv('TWITCH_ACCESS_TOKEN'):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
            return
            
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.auth_data = {
                'access_token': os.getenv('TWITCH_ACCESS_TOKEN'),
                'client_id': os.getenv('TWITCH_CLIENT_ID'),
                'nickname': os.getenv('TWITCH_NICKNAME'),
                'channel': os.getenv('TWITCH_CHANNEL')
            }
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.bot_running = True
            self.bot_thread = threading.Thread(target=self.run_bot_async, daemon=True)
            self.bot_thread.start()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.status_label.config(text="üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", foreground="green")
            self.start_button.config(state="disabled")
            self.stop_button.config(state="normal")
            
            self.log_message("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")
            
    def run_bot_async(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –≤ —ç—Ç–æ–º –ø–æ—Ç–æ–∫–µ
            self.bot = TranslateBot(
                access_token=self.auth_data['access_token'],
                client_id=self.auth_data['client_id'],
                nickname=self.auth_data['nickname'],
                channel=self.auth_data['channel']
            )
            
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –±–æ—Ç–∞ –≤ GUI (–∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
            original_log = self.bot.logger.info
            def custom_log(message):
                original_log(message)
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ GUI –ª–æ–≥
                try:
                    if "–ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Twitch" in message:
                        print(f"‚úÖ {message}")
                    elif "–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è" in message:
                        print(f"üîÑ {message}")
                    elif "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É" in message:
                        print(f"üéÆ {message}")
                    else:
                        print(f"üìù {message}")
                except:
                    pass
            
            self.bot.logger.info = custom_log
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Twitch...")
            loop.run_until_complete(self.bot.start())
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}"
            self.root.after(0, lambda: self.log_message(error_msg))
            self.root.after(0, self.stop_bot)
        finally:
            try:
                loop.close()
            except:
                pass
            
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        if not self.bot_running:
            return
            
        try:
            self.log_message("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            
            if self.bot:
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
                try:
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π event loop –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                    import asyncio
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    
                    async def send_goodbye():
                        try:
                            channel = self.bot.get_channel(self.bot.channel)
                            if channel:
                                goodbye_message = "ü§ñ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
                                await channel.send(goodbye_message)
                                self.log_message("üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç")
                        except Exception as e:
                            self.log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç: {e}")
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
                    loop.run_until_complete(send_goodbye())
                    loop.close()
                    
                except Exception as e:
                    self.log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: {e}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è
                import time
                time.sleep(1)
            
            # –¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
            self.bot_running = False
            self.bot = None
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.status_label.config(text="‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", foreground="red")
            self.start_button.config(state="normal")
            self.stop_button.config(state="disabled")
            
            self.log_message("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
            
    def open_settings(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            auth_gui = AuthGUI()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            def run_auth_gui():
                try:
                    auth_gui.run()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ AuthGUI: {e}")
                finally:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                    self.root.after(100, self.check_settings)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            auth_thread = threading.Thread(target=run_auth_gui, daemon=True)
            auth_thread.start()
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            
    def clear_log(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥"""
        self.log_text.config(state="normal")
        self.log_text.delete(1.0, tk.END)
        self.log_text.config(state="disabled")
        
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if self.bot_running:
            if messagebox.askokcancel("–í—ã—Ö–æ–¥", "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –≤—ã–π—Ç–∏?"):
                self.stop_bot()
                self.root.destroy()
        else:
            self.root.destroy()
            
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç GUI"""
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        self.root.mainloop()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = BotGUI()
    app.run()

if __name__ == "__main__":
    main()
