import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import os
from dotenv import load_dotenv

class AuthGUI:
    """–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Twitch"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Twitch Translate Bot - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        self.root.geometry("800x900")
        self.root.resizable(True, True)
        self.root.minsize(750, 800)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        self.setup_dark_theme()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.center_window()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.access_token = tk.StringVar()
        self.refresh_token = tk.StringVar()
        self.client_id = tk.StringVar()
        self.nickname = tk.StringVar()
        self.channel = tk.StringVar()
        
        self.setup_ui()
        self.load_existing_data()
        
    def setup_dark_theme(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã"""
        # –¶–≤–µ—Ç–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        self.bg_color = "#2b2b2b"
        self.fg_color = "#ffffff"
        self.entry_bg = "#3c3c3c"
        self.entry_fg = "#ffffff"
        self.button_bg = "#4a4a4a"
        self.button_fg = "#ffffff"
        self.warning_bg = "#4a2b2b"
        self.warning_fg = "#ff6b6b"
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        style = ttk.Style()
        style.theme_use('clam')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        style.configure('TFrame', background=self.bg_color, relief='flat', borderwidth=0)
        style.configure('TLabel', background=self.bg_color, foreground=self.fg_color, font=("Arial", 10))
        style.configure('TButton', background=self.button_bg, foreground=self.button_fg, borderwidth=1, focuscolor='none')
        style.configure('TEntry', fieldbackground=self.entry_bg, foreground=self.entry_fg, borderwidth=1, insertcolor=self.entry_fg)
        style.configure('TLabelframe', background=self.bg_color, foreground=self.fg_color, borderwidth=1, relief='solid')
        style.configure('TLabelframe.Label', background=self.bg_color, foreground=self.fg_color, font=("Arial", 10, "bold"))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞
        style.configure('Vertical.TScrollbar', 
                       background=self.button_bg, 
                       troughcolor=self.bg_color,
                       bordercolor=self.bg_color,
                       arrowcolor=self.fg_color,
                       darkcolor=self.button_bg,
                       lightcolor=self.button_bg)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.root.configure(bg=self.bg_color)
        
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f"{width}x{height}+{x}+{y}")
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        canvas = tk.Canvas(self.root, bg=self.bg_color, highlightthickness=0)
        scrollbar = ttk.Scrollbar(self.root, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –≤ canvas –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ñ—Ä–µ–π–º–∞
        canvas_window = canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –º—ã—à—å—é
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(scrollable_frame, padding="20")
        main_frame.pack(fill="both", expand=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        def update_scroll_region():
            canvas.update_idletasks()
            canvas.configure(scrollregion=canvas.bbox("all"))
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Ñ—Ä–µ–π–º–∞ —Ä–∞–≤–Ω–æ–π —à–∏—Ä–∏–Ω–µ canvas
            canvas.itemconfig(canvas_window, width=canvas.winfo_width())
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollable_frame.bind("<Configure>", lambda e: update_scroll_region())
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Twitch Translate Bot", 
                               font=("Arial", 18, "bold"))
        title_label.pack(pady=(0, 20))
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–∂–µ—Ç–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        instructions_frame = ttk.LabelFrame(main_frame, text="üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ", padding="10")
        instructions_frame.pack(fill="x", pady=(0, 20))
        
        instructions = """–ü–û–®–ê–ì–û–í–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê TWITCH –ë–û–¢–ê:

1. –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–ê:
   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π Twitch –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –±–æ—Ç–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
   ‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç

2. –ü–û–õ–£–ß–ï–ù–ò–ï –¢–û–ö–ï–ù–û–í:
   ‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://twitchtokengenerator.com/
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ "Bot Chat Token"
   ‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç –ë–û–¢–ê (–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª!)
   ‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ: ACCESS TOKEN, REFRESH TOKEN, CLIENT ID

3. –ù–ê–°–¢–†–û–ô–ö–ê –ö–ê–ù–ê–õ–ê:
   ‚Ä¢ –í –ø–æ–ª–µ "–ö–∞–Ω–∞–ª" —É–∫–∞–∂–∏—Ç–µ –í–ê–® —Å—Ç—Ä–∏–º-–∫–∞–Ω–∞–ª (–∫—É–¥–∞ –±—É–¥–µ—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –±–æ—Ç)
   ‚Ä¢ –í –ø–æ–ª–µ "–ù–∏–∫–Ω–µ–π–º –±–æ—Ç–∞" —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ê–ö–ö–ê–£–ù–¢–ê –ë–û–¢–ê

4. –í–´–î–ê–ß–ê –ü–†–ê–í (–í–ê–ñ–ù–û!):
   ‚Ä¢ –ó–∞–π–¥–∏—Ç–µ –≤ —á–∞—Ç –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
   ‚Ä¢ –í—ã–¥–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: /mod –∏–º—è_–±–æ—Ç–∞
   ‚Ä¢ –ë–µ–∑ –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –±—ã—Å—Ç—Ä–æ"""
        
        instruction_text = scrolledtext.ScrolledText(
            instructions_frame, 
            font=("Arial", 10),
            wrap=tk.WORD,
            height=12,
            bg=self.entry_bg,
            fg=self.entry_fg,
            insertbackground=self.entry_fg,
            selectbackground="#555555",
            selectforeground=self.entry_fg,
            state="normal"
        )
        instruction_text.insert("1.0", instructions)
        instruction_text.config(state="disabled")
        instruction_text.pack(fill="both", expand=True)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        input_frame = ttk.LabelFrame(main_frame, text="üîë –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", padding="15")
        input_frame.pack(fill="x", pady=(0, 20))
        
        # Access Token
        token_frame = ttk.Frame(input_frame)
        token_frame.pack(fill="x", pady=5)
        ttk.Label(token_frame, text="Access Token:", font=("Arial", 10, "bold")).pack(anchor=tk.W)
        access_entry = tk.Entry(token_frame, textvariable=self.access_token, show="*", 
                               bg=self.entry_bg, fg=self.entry_fg, insertbackground=self.entry_fg,
                               font=("Arial", 10), relief="solid", bd=1)
        access_entry.pack(fill="x", pady=(5, 0))
        
        # Refresh Token  
        refresh_frame = ttk.Frame(input_frame)
        refresh_frame.pack(fill="x", pady=5)
        ttk.Label(refresh_frame, text="Refresh Token:", font=("Arial", 10, "bold")).pack(anchor=tk.W)
        refresh_entry = tk.Entry(refresh_frame, textvariable=self.refresh_token, show="*",
                                bg=self.entry_bg, fg=self.entry_fg, insertbackground=self.entry_fg,
                                font=("Arial", 10), relief="solid", bd=1)
        refresh_entry.pack(fill="x", pady=(5, 0))
        
        # Client ID
        client_frame = ttk.Frame(input_frame)
        client_frame.pack(fill="x", pady=5)
        ttk.Label(client_frame, text="Client ID:", font=("Arial", 10, "bold")).pack(anchor=tk.W)
        client_entry = tk.Entry(client_frame, textvariable=self.client_id,
                               bg=self.entry_bg, fg=self.entry_fg, insertbackground=self.entry_fg,
                               font=("Arial", 10), relief="solid", bd=1)
        client_entry.pack(fill="x", pady=(5, 0))
        
        # Nickname
        nickname_frame = ttk.Frame(input_frame)
        nickname_frame.pack(fill="x", pady=5)
        ttk.Label(nickname_frame, text="–ù–∏–∫–Ω–µ–π–º –±–æ—Ç–∞:", font=("Arial", 10, "bold")).pack(anchor=tk.W)
        nickname_entry = tk.Entry(nickname_frame, textvariable=self.nickname,
                                 bg=self.entry_bg, fg=self.entry_fg, insertbackground=self.entry_fg,
                                 font=("Arial", 10), relief="solid", bd=1)
        nickname_entry.pack(fill="x", pady=(5, 0))
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–∞
        ttk.Label(nickname_frame, text="(–∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –±–æ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: mybotname)", 
                 font=("Arial", 9), foreground="#aaaaaa").pack(anchor=tk.W, pady=(5, 0))
        
        # Channel
        channel_frame = ttk.Frame(input_frame)
        channel_frame.pack(fill="x", pady=5)
        ttk.Label(channel_frame, text="–í–∞—à –∫–∞–Ω–∞–ª:", font=("Arial", 10, "bold")).pack(anchor=tk.W)
        channel_entry = tk.Entry(channel_frame, textvariable=self.channel,
                                bg=self.entry_bg, fg=self.entry_fg, insertbackground=self.entry_fg,
                                font=("Arial", 10), relief="solid", bd=1)
        channel_entry.pack(fill="x", pady=(5, 0))
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        ttk.Label(channel_frame, text="(–∏–º—è –≤–∞—à–µ–≥–æ —Å—Ç—Ä–∏–º-–∫–∞–Ω–∞–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: yourchannelname)", 
                 font=("Arial", 9), foreground="#aaaaaa").pack(anchor=tk.W, pady=(5, 0))
        
        # –í–∞–∂–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        warning_frame = ttk.LabelFrame(main_frame, text="‚ö†Ô∏è –í–ê–ñ–ù–û - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ü–†–û–ß–ò–¢–ê–ô–¢–ï", padding="15")
        warning_frame.pack(fill="x", pady=(0, 20))
        
        warning_text = """–ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:

1. –ó–∞–π–¥–∏—Ç–µ –≤ —á–∞—Ç –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
2. –í—ã–¥–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥–æ–π: /mod –∏–º—è_–±–æ—Ç–∞
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
4. –ë–µ–∑ –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ!

–ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –Ω–∏–∫–Ω–µ–π–º –±–æ—Ç–∞ "mytranslatebot", –≤–≤–µ–¥–∏—Ç–µ: /mod mytranslatebot"""
        
        warning_text_widget = scrolledtext.ScrolledText(
            warning_frame, 
            font=("Arial", 10),
            wrap=tk.WORD,
            height=8,
            bg=self.warning_bg,
            fg=self.warning_fg,
            insertbackground=self.warning_fg,
            selectbackground="#555555",
            selectforeground=self.warning_fg,
            state="normal"
        )
        warning_text_widget.insert("1.0", warning_text)
        warning_text_widget.config(state="disabled")
        warning_text_widget.pack(fill="both", expand=True)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(pady=20)
        
        save_button = tk.Button(button_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å", 
                               command=self.save_and_exit,
                               bg="#4CAF50", fg="white", font=("Arial", 12, "bold"),
                               relief="raised", bd=2, padx=20, pady=10)
        save_button.pack(side=tk.LEFT, padx=(0, 10))
        
        cancel_button = tk.Button(button_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", 
                                 command=self.cancel,
                                 bg="#f44336", fg="white", font=("Arial", 12, "bold"),
                                 relief="raised", bd=2, padx=20, pady=10)
        cancel_button.pack(side=tk.LEFT)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.root.update_idletasks()
        canvas.configure(scrollregion=canvas.bbox("all"))
        canvas.itemconfig(canvas_window, width=canvas.winfo_width())
        
    def load_existing_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞"""
        if os.path.exists('.env'):
            load_dotenv()
            
            if os.getenv('TWITCH_ACCESS_TOKEN'):
                self.access_token.set(os.getenv('TWITCH_ACCESS_TOKEN'))
            if os.getenv('TWITCH_REFRESH_TOKEN'):
                self.refresh_token.set(os.getenv('TWITCH_REFRESH_TOKEN'))
            if os.getenv('TWITCH_CLIENT_ID'):
                self.client_id.set(os.getenv('TWITCH_CLIENT_ID'))
            if os.getenv('TWITCH_NICKNAME'):
                self.nickname.set(os.getenv('TWITCH_NICKNAME'))
            if os.getenv('TWITCH_CHANNEL'):
                self.channel.set(os.getenv('TWITCH_CHANNEL'))
                
    def save_and_exit(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
        if not self.access_token.get().strip():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ Access Token")
            return
            
        if not self.client_id.get().strip():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ Client ID")
            return
            
        if not self.nickname.get().strip():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –±–æ—Ç–∞")
            return
            
        if not self.channel.get().strip():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–∞–ª")
            return
            
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ .env —Ñ–∞–π–ª
        env_content = f"""# Twitch Translate Bot Configuration
TWITCH_ACCESS_TOKEN={self.access_token.get().strip()}
TWITCH_REFRESH_TOKEN={self.refresh_token.get().strip()}
TWITCH_CLIENT_ID={self.client_id.get().strip()}
TWITCH_NICKNAME={self.nickname.get().strip()}
TWITCH_CHANNEL={self.channel.get().strip()}
"""
        
        try:
            with open('.env', 'w', encoding='utf-8') as f:
                f.write(env_content)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            self.root.destroy()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
            
    def cancel(self):
        """–û—Ç–º–µ–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ"""
        if messagebox.askokcancel("–û—Ç–º–µ–Ω–∞", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É?"):
            self.root.destroy()
            
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        try:
            if hasattr(self, 'root') and self.root:
                self.root.quit()
                self.root.destroy()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ AuthGUI: {e}")
            
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç GUI"""
        try:
            self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
            self.root.mainloop()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ AuthGUI.run(): {e}")
        finally:
            try:
                if hasattr(self, 'root') and self.root:
                    self.root.destroy()
            except:
                pass
        
    def get_auth_data(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        return {
            'access_token': self.access_token.get().strip(),
            'refresh_token': self.refresh_token.get().strip(),
            'client_id': self.client_id.get().strip(),
            'nickname': self.nickname.get().strip(),
            'channel': self.channel.get().strip()
        }
